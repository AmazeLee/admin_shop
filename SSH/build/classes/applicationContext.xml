<?xml version="1.0" encoding="UTF-8"?>  
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
    xmlns="http://www.springframework.org/schema/beans"   
    xmlns:context="http://www.springframework.org/schema/context"  
    xmlns:aop="http://www.springframework.org/schema/aop"   
    xmlns:tx="http://www.springframework.org/schema/tx"  
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd   
                        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd   
                        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd   
                        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd ">  
    
    <!-- 读取外部的db.properties文件配置 -->
	<context:property-placeholder location="classpath:db.properties" />
	
	<!-- 配置C3P0连接池 -->
	<bean name="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="jdbcUrl" value="${jdbc.jdbcUrl}"></property>
		<property name="driverClass" value="${jdbc.driverClass}"></property>
		<property name="user" value="${jdbc.user}"></property>
		<property name="password" value="${jdbc.password}"></property>
	</bean>
	
	<!-- 核心事务管理器 -->
	<bean name="transactionManager" class="org.springframework.orm.hibernate5.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	
	<!-- 配置通知 -->  
    <tx:advice id="txAdvice" transaction-manager="transactionManager" >  
        <tx:attributes>  
            <tx:method name="save*" isolation="REPEATABLE_READ" propagation="REQUIRED" read-only="false" />  
            <tx:method name="persist*" isolation="REPEATABLE_READ" propagation="REQUIRED" read-only="false" />  
            <tx:method name="update*" isolation="REPEATABLE_READ" propagation="REQUIRED" read-only="false" />  
            <tx:method name="modify*" isolation="REPEATABLE_READ" propagation="REQUIRED" read-only="false" />  
            <tx:method name="delete*" isolation="REPEATABLE_READ" propagation="REQUIRED" read-only="false" />  
            <tx:method name="remove*" isolation="REPEATABLE_READ" propagation="REQUIRED" read-only="false" />  
            <tx:method name="get*" isolation="REPEATABLE_READ" propagation="REQUIRED" read-only="true" />  
            <tx:method name="find*" isolation="REPEATABLE_READ" propagation="REQUIRED" read-only="true" />
            <!-- 以上走不了就走这个 -->
            <tx:method name="*" isolation="REPEATABLE_READ" propagation="REQUIRED" read-only="false" />    
        </tx:attributes>  
    </tx:advice>  
      
    <!-- 配置将通知织入目标对象  -->  
    <aop:config>  
        <!-- 配置切点 -->  
        <aop:pointcut expression="execution(* com.sh.service.impl.*ServiceImpl.*(..))" id="txPc"/>  
        <!-- 配置切面 -->  
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPc" />  
    </aop:config>  
	
	<!-- 开启注解事务 -->
	<!-- <tx:annotation-driven transaction-manager="transactionManager"/> -->
    
    <!-- 将sessionFactory配置到spring容器 -->
    <!-- 配置方案二：在spring配置中放置hibernate配置信息 -->
	<bean name="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
		<!-- 将连接池注入到sessionFactory, hibernate会通过连接池获得连接 -->
		<property name="dataSource" ref="dataSource" ></property>
		<!-- 配置Hibernate基本数据 -->
		<property name="hibernateProperties">
			<!-- 必选配置 -->
			<props>
				<!-- <prop key="hibernate.connection.driver_class">com.mysql.jdbc.Driver</prop>
				<prop key="hibernate.connection.url">jdbc:mysql:///hibernate_01</prop>
				<prop key="hibernate.connection.username">root</prop>
				<prop key="hibernate.connection.password">root</prop> -->
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
				
				<!-- 可选配置 -->
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
			</props>
		</property>
		
		<!-- 引入orm元数据,指定orm元数据所在的包路径,spring会自动读取包中的所有配置 -->
		<property name="mappingDirectoryLocations" value="classpath:com/sh/domain"></property>
	</bean>
      
    <!-- action配置 --> 
	<!-- 注意：Action对象作用范围一定是多例的，这样按此符合Struts2架构 -->
    <bean name="shopAdminAction" class="com.sh.web.action.ShopAdminAction" scope="prototype">
    	<property name="shopAdminService" ref="shopAdminService"></property>
    </bean> 
    <bean name="productAction" class="com.sh.web.action.ProductAction" scope="prototype">
    	<property name="productService" ref="productService"></property>
    </bean>
    <bean name="categoryAction" class="com.sh.web.action.CategoryAction" scope="prototype">
    	<property name="categoryService" ref="categoryService"></property>
    </bean>
    <bean name="ordersAction" class="com.sh.web.action.OrdersAction" scope="prototype">
    	<property name="ordersService" ref="ordersService"></property>
    </bean>
    <bean name="userAction" class="com.sh.web.action.UserAction" scope="prototype">
    	<property name="userService" ref="userService"></property>
    </bean>    
                         
    <!-- service配置 -->
    <bean name="shopAdminService" class="com.sh.service.impl.ShopAdminServiceImpl">
    	<property name="sad" ref="shopAdminDao"></property>
    </bean>  
     <bean name="productService" class="com.sh.service.impl.ProductServiceImpl">
    	<property name="pd" ref="productDao"></property>
    </bean>  
     <bean name="categoryService" class="com.sh.service.impl.CategoryServiceImpl">
    	<property name="cd" ref="categoryDao"></property>
    </bean>
    <bean name="ordersService" class="com.sh.service.impl.OrdersServiceImpl">
    	<property name="od" ref="ordersDao"></property>
    </bean>
    <bean name="userService" class="com.sh.service.impl.UserServiceImpl">
    	<property name="ud" ref="userDao"></property>
    </bean>    
    
    <!-- dao配置 -->     
    <bean name="shopAdminDao" class="com.sh.dao.impl.ShopAdminDaoImpl">
    	<!-- 注入sessionFactory -->
    	<property name="sessionFactory" ref="sessionFactory"></property>
    </bean>
    <bean name="productDao" class="com.sh.dao.impl.ProductDaoImpl">
    	<!-- 注入sessionFactory -->
    	<property name="sessionFactory" ref="sessionFactory"></property>
    </bean> 
    <bean name="categoryDao" class="com.sh.dao.impl.CategoryDaoImpl">
    	<!-- 注入sessionFactory -->
    	<property name="sessionFactory" ref="sessionFactory"></property>
    </bean>
    <bean name="ordersDao" class="com.sh.dao.impl.OrdersDaoImpl">
    	<!-- 注入sessionFactory -->
    	<property name="sessionFactory" ref="sessionFactory"></property>
    </bean>
    <bean name="userDao" class="com.sh.dao.impl.UserDaoImpl">
    	<!-- 注入sessionFactory -->
    	<property name="sessionFactory" ref="sessionFactory"></property>
    </bean>                  
</beans>  